[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay = 0
let g:deoplete#enable_camel_case = 0
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_smart_case = 1
let g:deoplete#enable_refresh_always = 1
let g:deoplete#auto_complete_start_length = 1
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}
'''
on_i = 1

[[plugins]]
repo = 'neomake/neomake'
hook_add = '''
    autocmd! BufWritePost,BufEnter * Neomake

    let g:neomake_cpp_enable_markers=['clang']

    let g:neomake_javascript_eslint_maker = {
        \ 'exe': 'standard',
        \ 'errorformat': '%W  %f:%l:%c: %m'
        \ }
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    nnoremap <silent>q :ccl<CR>
    let g:quickrun_config = get(g:, 'quickrun_config', {})

    if filereadable('in')
        nnoremap <silent> , :ccl<CR> :QuickRun<in -mode n<CR>
    else
        nnoremap <silent> , :ccl<CR> :QuickRun -mode n<CR>
    endif

    let g:quickrun_config._ = {
    \   'outputter' : 'error',
    \   'outputter/error/success' : 'quickfix',
    \   'outputter/error/error'   : 'quickfix',
    \   'outputter/buffer/split'  : ':rightbelow 8sp',
    \ }
    let g:quickrun_config.cpp = {
    \   'command':'clang++',
    \   'cmdopt':'-std=c++11'
    \}
    let g:quickrun_config.cs = {
    \   'command':'mcs',
    \}
    let g:quickrun_config.python = {
    \   'command':'python3',
    \}
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  map <C-n> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
